// Code generated by go-bindata.
// sources:
// builtin_models/ResNet50_v1.yml
// DO NOT EDIT!

package tensorrt

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resnet50_v1Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x8f\xdb\x38\x12\xbd\xeb\x57\x14\x60\x2c\x7a\x17\x68\xcb\x96\x65\xbb\x6d\x1d\x16\xc8\xf6\x21\x59\xec\xa2\x07\xe8\x09\x92\x43\x10\x18\x25\xaa\x64\x71\x9a\x22\x09\xb2\x64\xb7\xf3\xeb\x07\x24\xe5\x8f\x9e\x04\x33\x39\x4c\x1f\x1a\x16\xab\x5e\xb1\xf8\xea\xb1\x8a\x1a\x7b\xaa\xe0\x99\xfc\x13\xf1\x6a\xbe\x3b\x14\x30\x81\xb0\x06\xa6\x85\x93\x19\x1c\xf4\xa6\x21\x95\xb5\x0e\x7b\x3a\x1a\xf7\x52\x65\x00\x09\xf3\x91\xb4\x37\xee\xf9\x23\x4c\xe0\x62\x85\xd6\x38\xe0\x8e\x46\x14\xc0\x81\x9c\x97\x46\x57\xf0\x90\xcf\xf3\xf9\x1b\xd7\xd1\x04\xc2\x68\x76\x28\x35\x67\x17\xe7\x22\xba\x9e\x1d\xa4\x6e\x8d\xeb\x91\xd3\x6f\xf0\xd4\xa3\x66\x29\x2e\xf6\x64\xcd\x42\x1c\x94\x9a\x5c\x05\x13\xb8\x7c\x78\x18\x3c\x35\xc0\x06\x2c\xb9\xe0\x99\x52\x03\xeb\xa8\x91\x22\xc4\xcc\xe0\xfa\x37\x81\x7e\x50\x2c\xad\x22\xb0\x0a\x39\xf8\x7b\x10\xa8\xa1\x26\xf0\x96\x84\x6c\x25\x35\x19\x00\xf6\xcd\x7a\x59\x45\xe4\xde\x0e\x15\x38\x94\xd6\x99\xdf\x48\xf0\x4c\xa0\xeb\xd5\x94\x23\x39\x8e\xab\xe8\x39\x15\x76\x88\xce\xe2\x67\x9c\xf7\xd1\xd9\x5a\xb1\x5e\x2a\xaa\x7e\x06\x37\xfa\x8e\xc8\xbf\xcc\xe9\xd6\xbd\x21\x2f\x9c\xb4\x1c\x79\xff\x77\x06\xf0\x2e\x88\x41\x36\x03\x2a\x50\x84\x4e\x4b\xbd\xbf\x29\x1a\x1b\x20\xf4\x14\x6b\x1c\xab\x16\xcc\xa6\x05\x4d\x1c\xec\x1e\xb8\x43\x06\x74\x04\x7e\xa8\x3d\x87\x42\xa1\x52\x27\x68\x88\x2c\x05\x69\xa0\x06\xee\x8c\xa7\x54\x16\xeb\xe8\x20\xcd\xe0\xd5\x29\xcf\x00\x3e\x13\xd0\xab\x55\x52\x48\x56\x27\x70\x14\xe8\x1f\x14\x72\xda\x4e\xe1\x29\x94\x13\xfd\x35\x2f\x77\xce\xb4\x1d\x74\xac\xa5\x87\xa3\xe4\x2e\x40\xc9\x91\x16\x14\xf2\xbd\x60\x41\x6a\x3b\xb0\xbf\x07\xa9\x3d\x13\x36\x21\xef\x4b\xa8\x41\x5f\x40\xcd\x35\xdc\x98\x95\x75\xe6\x20\x1b\x02\x61\x7a\xeb\xa8\x23\xed\xe5\x81\x80\x7a\x2b\x9d\x14\xa8\x80\x82\x35\x6c\xe7\x3b\x73\x0c\xd1\x22\x0b\xdc\x91\xa7\x6b\x8e\x17\x8a\x02\x3b\x84\x5e\x06\x3e\x0c\x18\xcb\xb2\x97\xdf\xe8\x1e\x50\x37\x51\x6b\x7b\x94\x1a\x50\x88\xc1\xa1\x38\x41\xeb\x4c\x1f\xe4\xec\x65\x43\x0e\x6b\x75\x02\xa9\x85\x0b\x45\x68\xa0\x21\xcb\x5d\xc8\xf1\x17\x1d\x8f\xf9\xdf\x1e\xf7\xf4\x44\x0c\x0d\x32\x7a\x62\x38\x12\xd0\x01\xd5\x10\x38\xbc\x4d\x64\xe4\x09\x53\x84\x40\xc4\x60\x43\x32\xc5\x6a\x31\xf2\x3c\x9d\x4e\x37\xaf\x6f\xca\xf6\xe9\xfd\xfb\x04\xad\x07\x06\xcf\x52\x29\xe8\xf0\x10\x4e\xab\xcc\x91\x5c\x24\x47\xd1\xab\xe4\x58\xcb\x77\x1a\x48\x7b\xea\x6b\x15\x5b\xc9\xf7\x5c\x78\x40\xd1\x49\x3a\x90\x87\x32\x5f\x3d\xfc\x03\xc8\x39\xe3\xc0\xfc\xe1\x24\x4c\x9e\xc1\x13\xe7\xf0\xb1\x93\x3e\x44\x18\x14\xc3\x71\x74\x2b\x3c\x87\x8b\x2a\xe8\x82\xfb\xff\xaf\x9f\x9e\x1f\x61\x31\x2f\x56\x20\x14\x7a\x2f\x5b\x29\x52\xeb\x60\xf4\x2f\x79\x76\xa9\xb2\x0f\x6d\xe2\xfa\x15\x3b\x04\xda\xa0\xb0\x19\x1c\xa9\xf6\x92\x29\xfc\x24\x16\x79\x0e\xe9\x96\xd4\xa9\xb4\xd7\xee\x36\x85\x8e\xd9\xfa\x6a\x36\xdb\x4b\xee\x86\x3a\x17\xa6\x9f\xfd\x0f\x65\x2f\xf5\xfe\x03\xcd\x02\x7b\xd3\xf3\x99\xa7\xe7\xfa\xbf\xc1\xa1\x7b\x95\x87\xdc\xb8\xfd\x0c\x6b\x3f\x2b\x56\xc5\x22\x9f\x97\xe5\x66\x95\x4d\x40\x49\x11\x18\x1c\xd9\x1b\xf7\x1c\x17\xab\xa8\x57\xcf\x4e\x0a\xa6\x26\x9b\x8c\xd2\x3e\xcb\x3d\xf9\xa6\xb5\x70\xcc\xd4\xf2\xd2\x77\xdc\x9e\x4f\x96\x2a\x90\x81\xe4\xd0\x93\xa5\xf3\x9c\xcc\xc1\x15\x95\xe4\x53\xec\x23\x6f\x9a\x43\x08\x9c\x7c\xce\xb8\x1b\xf3\x39\xcb\x9b\x50\x31\x82\xc5\xd0\x3a\x98\x9c\xaf\xc6\x3e\x4b\x8a\x7a\xd2\xbc\x4b\x29\xb4\xca\x20\x97\x8b\xd1\x16\x71\xbb\x28\xc0\x0a\xee\x82\x88\xef\x46\x8b\xc2\x93\x19\xb8\x82\xbb\xc7\x0f\x9f\xcf\x6b\xc2\x28\xe3\x76\xe1\x6c\x15\xdc\xfd\xe7\xfd\xf3\x79\xbd\x91\x7d\xb8\xa1\x46\xfb\x0a\xbe\x94\xf7\xb0\x58\x2c\xe3\xbf\xaf\xa3\xbd\x27\xd4\x15\x7c\x29\x16\x65\xbe\xde\xdc\x43\x51\xac\xf3\x87\x87\xed\x3d\x14\xf3\x32\xdf\x96\xdb\xaf\x99\x19\xd8\x0e\x1c\x12\x9e\xa4\x46\x77\xb2\x97\x32\x24\x5b\x06\x23\x85\x6f\x35\x16\x11\xf8\x23\x5e\x12\xec\x4a\x47\xf6\x03\x72\x47\x1f\x85\x75\x14\xd7\x0d\x75\x21\x8f\x90\xc3\x75\x29\xfb\x73\x2a\xad\x33\x35\xd6\x52\x49\x96\xe4\x2f\x84\x86\xd5\x44\x52\x4b\xc8\x83\x23\xbf\x1b\x9c\xaa\xa2\x18\xab\xd9\xcc\x97\x39\xf6\xf8\xcd\x68\x3c\xfa\xa8\x64\xcf\xc6\x51\x1e\x87\x47\x94\xa8\x3f\x69\x4f\xec\x67\xb1\xfe\x9a\x78\x5c\xc8\xf9\x95\xdf\x46\x15\x1d\x89\x17\x3f\xf4\x15\x2c\x9b\x45\xb9\xac\x57\x9b\xb2\x44\x81\xcb\xe5\x76\xb1\x99\xaf\x57\x58\x6c\xe6\x4d\x5d\xce\x8b\x35\x66\x51\x9a\xe1\x80\xe7\xf1\xea\x47\xb5\xee\x1d\xda\x2e\xf6\xc4\x23\xc9\x7d\xc7\xf1\xee\x9b\xc1\x09\x0a\x87\x8f\xd6\x9d\x45\xee\x7e\x3e\xfd\x18\xd7\xcf\x04\xb6\x2d\xcd\x1c\x79\x1d\x5e\x3c\xb3\xf4\xf4\x99\xae\xe6\xd3\x86\xac\x32\xa7\xdc\x3a\xc3\x26\x1d\x69\xdc\xf9\x6f\xde\x27\xda\xf3\x68\x3e\x37\x12\xe9\x77\xe8\x44\x27\x0f\xe3\xbc\x6f\x51\xf9\x70\xc3\x64\x1b\x7a\xdf\x7d\x90\x47\xea\x6f\x35\x7a\x0a\x45\x03\xe9\x01\x21\xfc\x60\x03\xa8\x61\x44\x67\xe9\x11\x13\x3c\xaf\x0c\xdd\x92\x98\x16\x62\xb8\x86\xb4\x49\xa3\x75\x44\xb5\x52\x51\x7c\xdb\xf9\xb3\x6a\xbf\xaf\x41\x18\x1b\x32\xa5\x72\xdd\x32\x6d\x75\x53\xf4\x1a\xcb\x76\xbb\x5c\xd1\x43\xbd\x59\xd7\xf3\x87\xf5\x72\x43\xcb\x76\x59\xae\x8a\x86\xe6\xeb\xed\xf6\x86\xd9\x1b\xd0\xb2\x5e\xcc\xd7\xeb\xb9\x58\x6d\x97\x9b\x72\x5b\x3c\x94\xcb\x79\xb9\xde\xae\x4b\xda\xac\x56\x4d\xb3\xc8\x90\xd9\xc9\x7a\xe0\xd4\xb9\xe9\x95\x1d\x9e\x67\x2a\x5c\x6d\x19\xc0\x8b\xd4\x4d\x05\x8f\x4f\x4f\x23\x13\xe1\x3b\xbd\x51\x06\x77\x9d\xc3\xf0\xcf\xc7\xa7\xa7\x7b\x78\x0e\xff\xf2\x3c\xff\x57\xb8\xd2\xe3\x83\x66\x37\x8e\xcf\xea\x3a\x86\x26\x97\x91\x7a\x7e\x4e\xc6\x97\xee\x08\xc8\x00\x7a\xd4\xb2\x25\xcf\x3b\x1c\xb8\x33\xae\x02\xac\x9b\x41\x35\xd9\xef\x01\x00\x00\xff\xff\xcf\x74\x99\xed\x60\x0b\x00\x00"

func resnet50_v1YmlBytes() ([]byte, error) {
	return bindataRead(
		_resnet50_v1Yml,
		"ResNet50_v1.yml",
	)
}

func resnet50_v1Yml() (*asset, error) {
	bytes, err := resnet50_v1YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ResNet50_v1.yml", size: 2912, mode: os.FileMode(436), modTime: time.Unix(1588606312, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ResNet50_v1.yml": resnet50_v1Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ResNet50_v1.yml": &bintree{resnet50_v1Yml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

